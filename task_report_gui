#!/usr/bin/env ruby
require 'gtk2'

CMD_TEMPLATE = 'task_report2 -o <output_dir> -t <file_type> -s <file_size> <csv_file>'

# /data/output/luan/yy08_sc01_084_001_an/bg: 148 files verified in total with Failure! Expected 150, but actual matched 148. Failed frames: 62, 126
# /data/output/luan/yy08_sc01_085a_001_an/occ: 75 files verified in total with Success!

def get_data_columns(line)
  verified = expected = matched = 0
  scene_name = failed_frames = ''
  if line.include? 'Success!' and line =~ /(\d+) files/
    verified = expected = matched = $1.to_i
    scene_name = line.split(':')[0]
  elsif line.include? 'Failure!' and line =~ /(\d+) files .+ Expected (\d+), .+ matched (\d+)\. Failed frames\: (.+)/
    verified, expected, matched, failed_frames = $1.to_i, $2.to_i, $3.to_i, $4
    scene_name = line.split(':')[0]
  end
  return scene_name, verified, expected, matched, failed_frames
end

class RenderResultItem
  attr_accessor :scene_name, :verified, :expected, :matched, :failed_frames
  def initialize(s, v, e, m, f)
    @scene_name, @verified, @expected, @matched, @failed_frames = s, v, e, m, f
  end
end

class CommandLine
  attr_accessor :output_dir, :csv_file, :file_type, :file_size

  def initialize
    @output_dir = '<not assigned>'
    @csv_file = '<not assigned>'
    @file_size = 1.0
    @file_type = '<not assigned>'
  end

  def getCommand
    CMD_TEMPLATE.gsub('<output_dir>', @output_dir).gsub('<csv_file>', @csv_file).gsub('<file_type>', @file_type).gsub('<file_size>', @file_size.to_s + 'KB')
  end
end

def get_cmdstr(output_dir, csv_file, file_type, file_size)
  cmdstr = CommandLine.new
  cmdstr.file_type = file_type.text if file_type.text.size > 0
  cmdstr.file_size = file_size.value if file_size.value > 0.0
  cmdstr.csv_file = csv_file.filename if csv_file.filename and csv_file.filename.size > 0
  cmdstr.output_dir = output_dir.filename if output_dir.filename and output_dir.filename.size > 0
  cmdstr.getCommand
end

def verify_cmd(cmdstr)
  puts 'Verifying ' + cmdstr + '...'
  return (not (cmdstr.include? '<' or cmdstr.include? '>'))
end

def get_cmd_output(cmdstr)
  return 'ERROR: failed verifying the command to be executed.' if not verify_cmd(cmdstr)
  puts 'Running ' + cmdstr + '...'
  list = Array.new
  IO.popen(cmdstr, 'r').each do |line|
    scene_name, verified, expected, matched, failed_frames = get_data_columns(line)
    list << RenderResultItem.new(scene_name, verified, expected, matched, failed_frames) if verified > 0
  end
  return list
end

def setup_tree_view(treeview)
  renderer = Gtk::CellRendererText.new
  column = Gtk::TreeViewColumn.new('场景输出', renderer, 'text' => 0)
  treeview.append_column(column)
  renderer = Gtk::CellRendererText.new
  column = Gtk::TreeViewColumn.new('总验证数量', renderer, 'text' => 1)
  treeview.append_column(column)
  renderer = Gtk::CellRendererText.new
  column = Gtk::TreeViewColumn.new('期望数量', renderer, 'text' => 1)
  treeview.append_column(column)
  renderer = Gtk::CellRendererText.new
  column = Gtk::TreeViewColumn.new('合格数量', renderer, 'text' => 1)
  treeview.append_column(column)
  renderer = Gtk::CellRendererText.new
  renderer.editable = true
  column = Gtk::TreeViewColumn.new('失败祯', renderer, 'text' => 2)
  treeview.append_column(column)
end

def error_message(parent_window, message)
  dialog = Gtk::MessageDialog.new(parent_window,
				  Gtk::Dialog::DESTROY_WITH_PARENT,
				  Gtk::MessageDialog::ERROR,
				  Gtk::MessageDialog::BUTTONS_CLOSE,
				  message)
  dialog.run
  dialog.destroy
end

# Create Window
window = Gtk::Window.new(Gtk::Window::TOPLEVEL)
window.set_title  "DrQueue任务报表生成工具"
window.border_width = 10
window.signal_connect('delete_event') { Gtk.main_quit }

# Create Label and FileChooserButton for Task Output Dir 
label_dir = Gtk::Label.new
label_dir.text = '任务输出目录'
label_dir.set_alignment(1, 0)
chooser_dir  = Gtk::FileChooserButton.new("选择文件夹", Gtk::FileChooser::ACTION_SELECT_FOLDER)
chooser_dir.current_folder  = '/data/output'#GLib.home_dir

# Create Label and FileChooserButton for Task List CSV File
label_file = Gtk::Label.new
label_file.text = '任务列表文件（CSV）'
label_file.set_alignment(1, 0)
chooser_file = Gtk::FileChooserButton.new("选择文件", Gtk::FileChooser::ACTION_OPEN)
chooser_file.current_folder = "/data/input" 
# chooser_file.filename = "/home/iwk/wk/a_cfile.c" # <--- would work if file existed
filter = Gtk::FileFilter.new
filter.name = "CSV Files"
filter.add_pattern('*.csv')
chooser_file.add_filter(filter)

# Create Label and Text Entry for Task Output File Type
label_file_type = Gtk::Label.new
label_file_type.text = '渲染输出文件类型（后缀名，如png,jpeg,tiff等）'
label_file_type.set_alignment(1, 0)
entry_file_type = Gtk::Entry.new
entry_file_type.text = 'png'

# Create Label and SpinButton for Task Output File Size
label_file_size = Gtk::Label.new
label_file_size.text = '渲染输出文件大小（小于该数值将被认为该祯失败）'
label_file_size.set_alignment(1, 0)
float = Gtk::Adjustment.new(1.0, 0.1, 1024.0, 1.0, 10.0, 10.0) # value, min, max, step, pg-incr pg-size
adjustment_file_size = Gtk::SpinButton.new(float, 1.0, 1)

# Create Label for Command String(Preview)
label_cmd = Gtk::Label.new
label_cmd.text = CMD_TEMPLATE

# Create TreeView for verification result
treeview = Gtk::TreeView.new
setup_tree_view(treeview)
store = Gtk::ListStore.new(String, String, String)

#treeview.model = store

# Create ScrolledWindow as container for TreeView
scrolled_win = Gtk::ScrolledWindow.new
scrolled_win.set_size_request(300, 400)
scrolled_win.add(treeview)
scrolled_win.set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC)

# Create Buttons
button_test = Gtk::Button.new('预览命令')
button_test.signal_connect('clicked') {
  label_cmd.text = get_cmdstr(chooser_dir, chooser_file, entry_file_type, adjustment_file_size)
}

button_run = Gtk::Button.new('执行命令')
button_run.signal_connect('clicked') {
  cmdstr = get_cmdstr(chooser_dir, chooser_file, entry_file_type, adjustment_file_size)
  if not verify_cmd(cmdstr)
    error_message(window, "ERROR: Invalid command!")
  else
    puts 'Running ' + cmdstr + '...'
    list = Array.new
    IO.popen(cmdstr, 'r').each do |line|
      scene_name, verified, expected, matched, failed_frames = get_data_columns(line)
      list << RenderResultItem.new(scene_name, verified, expected, matched, failed_frames) if verified > 0
      store = Gtk::ListStore.new(String, Integer, Integer, Integer, String)
      list.each do |item|
        iter = store.append
        store.set_value(iter, 0, item.scene_name)
        store.set_value(iter, 1, item.verified)
        store.set_value(iter, 2, item.expected)
        store.set_value(iter, 3, item.matched)
        store.set_value(iter, 4, item.failed_frames)
      end
      treeview.model = store
    end
  end
}


# Constructing Window Layout
vbox_labels = Gtk::VBox.new(true, 5)
vbox_entries = Gtk::VBox.new(true, 5)
hbox_top = Gtk::HBox.new(true, 5)
hbox_bottom = Gtk::HBox.new(true, 5)
vbox_global = Gtk::VBox.new

vbox_labels.pack_start_defaults(label_dir)
vbox_entries.pack_start_defaults(chooser_dir)
vbox_labels.pack_start_defaults(label_file)
vbox_entries.pack_start_defaults(chooser_file)
vbox_labels.pack_start_defaults(label_file_type)
vbox_entries.pack_start_defaults(entry_file_type)
vbox_labels.pack_start_defaults(label_file_size)
vbox_entries.pack_start_defaults(adjustment_file_size)

hbox_top.pack_start_defaults(vbox_labels)
hbox_top.pack_start_defaults(vbox_entries)
hbox_bottom.pack_start_defaults(button_test)
hbox_bottom.pack_start_defaults(button_run)

vbox_global.pack_start(hbox_top)
vbox_global.pack_start(hbox_bottom)
vbox_global.pack_start(label_cmd)
vbox_global.pack_start(scrolled_win)

window.add(vbox_global)

window.show_all
# Start main loop
Gtk.main
